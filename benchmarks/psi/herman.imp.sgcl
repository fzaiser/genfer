# flags(geobound): --optimizer ipopt --optimizer linear

# true EV: 0.75

process1 := 0;
process2 := 0;
process3 := 0;

if 0 ~ Bernoulli(0.5) {
  process1 := 1;
}
if 0 ~ Bernoulli(0.5) {
  process2 := 1;
}
if 0 ~ Bernoulli(0.5) {
  process3 := 1;
}

sum := process1;
sum += process2;
sum += process3;

count := 0;

while sum = 1 { # TODO: should this be != 1?
    oldprocess1 := process1;
    oldprocess2 := process2;
    oldprocess3 := process3;

    if process1 = 0 or oldprocess3 = 1 {
        if process1 = 1 or oldprocess3 = 0 {
            if 0 ~ Bernoulli(0.5) {
                process1 := 0;
            } else {
                process1 := 1;
            }
        } else {
            process1 := oldprocess3;
        }
    } else {
        process1 := oldprocess3;
    }

    if process2 = 0 or oldprocess1 = 1 {
        if process2 = 1 or oldprocess1 = 0 {
            if 0 ~ Bernoulli(0.5) {
                process2 := 0;
            } else {
                process2 := 1;
            }
        } else {
            process2 := oldprocess1;
        }
    } else {
        process2 := oldprocess1;
    }

    if process3 = 0 or oldprocess2 = 1 {
        if process3 = 1 or oldprocess2 = 0 {
            if 0 ~ Bernoulli(0.5) {
                process3 := 0;
            } else {
                process3 := 1;
            }
        } else {
            process3 := oldprocess2;
        }
    } else {
        process3 := oldprocess2;
    }

    oldprocess1 := 0;
    oldprocess2 := 0;
    oldprocess3 := 0;

    sum := process1;
    sum += process2;
    sum += process3;
    count += 1;
}

process1 := 0;
process2 := 0;
process3 := 0;

return count;

#= https://github.com/eth-sri/psi/blob/9db68ba9581b7a1211f1514e44e7927af24bd398/test/colorado/probabilistic-program-benchmarks/herman.imp
p = 0.5;

process1 = 0.0;
process2 = 0.0;
process3 = 0.0;
process4 = 0.0;
process5 = 0.0;

if (unifReal(0,1) <= p)
then
	process1 = 1.0
end;
if (unifReal(0,1) <= p)
then
	process2 = 1.0
end;
if (unifReal(0,1) <= p)
then
	process3 = 1.0
end;

sum = process1 + process2 + process3;
if (sum < 1.0)
then
	notStable = 1.0
else
	if (sum > 1.0)
	then
		notStable = 1.0
	else
		notStable = 0.0
	end
end;	

count = 0;
while (notStable > 0.5) do
      oldprocess1 = process1;
      oldprocess2 = process2;
      oldprocess3 = process3;
      
      if (process1 <= oldprocess3) 
      then
		if (process1 >= oldprocess3)
		then	     
			     if (unifReal(0,1) <= p)
      			     then
				     process1 = 0.0
      			     else
			             process1 = 1.0
     		             end
		else
			process1 = oldprocess3
		end
      else
		process1 = oldprocess3
      end;

      if (process2 <= oldprocess1) 
      then
		if (process2 >= oldprocess1)
		then	     
			     if (unifReal(0,1) <= p)
      			     then
				     process2 = 0.0
      			     else
			             process2 = 1.0
     		             end
		else
			process2 = oldprocess1
		end
      else
		process2 = oldprocess1
      end;

      if (process3 <= oldprocess2) 
      then
		if (process3 >= oldprocess2)
		then	     
			     if (unifReal(0,1) <= p)
      			     then
				     process3 = 0.0
      			     else
			             process3 = 1.0
     		             end
		else
			process3 = oldprocess2
		end
      else
		process3 = oldprocess2
      end;

      sum = process1 + process2 + process3;
      if (sum < 1.0)
      then
		notStable = 1.0
      else
		if (sum > 1.0)
		then
			notStable = 1.0
		else
			notStable = 0.0
		end
      end;
      
      count = count + 1
end;

estimateProb(count < 1);
estimateProb(count >= 1);
estimateProb(count >= 5);
estimateProb(count >= 10);
estimateProb(count >= 20);
estimateProb(count >= 50);
estimateProb(count >= 100)
=#
