import re
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.ticker as ticker
from util import hitting_time_prob, asymptotic_hitting_time

gubpi_time = 103 # seconds
gubpi_output = """
[-0.1, 0.9]: [0, 0]
[0.9, 1.9]: [0.75, 0.75]
[1.9, 2.9]: [0, 0]
[2.9, 3.9]: [0.140625, 0.140625]
[3.9, 4.9]: [0, 0]
[4.9, 5.9]: [0.052734375, 0.052734375]
[5.9, 6.9]: [0, 0]
[6.9, 7.9]: [0.0247192383, 0.0247192383]
[7.9, 8.9]: [0, 0]
[8.9, 9.9]: [0.0129776001, 0.0129776001]
[9.9, 10.9]: [0, 0]
[10.9, 11.9]: [0.00729990005, 0.00729990005]
[11.9, 12.9]: [0, 0]
[12.9, 13.9]: [0.00430172682, 0.00430172682]
[13.9, 14.9]: [0, 0]
[14.9, 15.9]: [0, 0.00734215975]
[15.9, 16.9]: [0, 0.00734215975]
[16.9, 17.9]: [0, 0.00734215975]
[17.9, 18.9]: [0, 0.00734215975]
[18.9, 19.9]: [0, 0.00734215975]
[19.9, 20.9]: [0, 0.00734215975]
[20.9, 21.9]: [0, 0.00734215975]
[21.9, 22.9]: [0, 0.00734215975]
[22.9, 23.9]: [0, 0.00734215975]
[23.9, 24.9]: [0, 0.00734215975]
[24.9, 25.9]: [0, 0.00734215975]
[25.9, 26.9]: [0, 0.00734215975]
[26.9, 27.9]: [0, 0.00734215975]
[27.9, 28.9]: [0, 0.00734215975]
[28.9, 29.9]: [0, 0.00734215975]
[29.9, 30.9]: [0, 0.00734215975]
[30.9, 31.9]: [0, 0.00734215975]
[31.9, 32.9]: [0, 0.00734215975]
[32.9, 33.9]: [0, 0.00734215975]
[33.9, 34.9]: [0, 0.00734215975]
[34.9, 35.9]: [0, 0.00734215975]
[35.9, 36.9]: [0, 0.00734215975]
[36.9, 37.9]: [0, 0.00734215975]
[37.9, 38.9]: [0, 0.00734215975]
[38.9, 39.9]: [0, 0.00734215975]
[39.9, 40.9]: [0, 0.00734215975]
[40.9, 41.9]: [0, 0.00734215975]
[41.9, 42.9]: [0, 0.00734215975]
[42.9, 43.9]: [0, 0.00734215975]
[43.9, 44.9]: [0, 0.00734215975]
[44.9, 45.9]: [0, 0.00734215975]
[45.9, 46.9]: [0, 0.00734215975]
[46.9, 47.9]: [0, 0.00734215975]
[47.9, 48.9]: [0, 0.00734215975]
[48.9, 49.9]: [0, 0.00734215975]
[49.9, 50.9]: [0, 0.00734215975]
[50.9, 51.9]: [0, 0.00734215975]
[51.9, 52.9]: [0, 0.00734215975]
[52.9, 53.9]: [0, 0.00734215975]
[53.9, 54.9]: [0, 0.00734215975]
[54.9, 55.9]: [0, 0.00734215975]
[55.9, 56.9]: [0, 0.00734215975]
[56.9, 57.9]: [0, 0.00734215975]
[57.9, 58.9]: [0, 0.00734215975]
[58.9, 59.9]: [0, 0.00734215975]
[59.9, 60.9]: [0, 0.00734215975]
[60.9, 61.9]: [0, 0.00734215975]
[61.9, 62.9]: [0, 0.00734215975]
[62.9, 63.9]: [0, 0.00734215975]
[63.9, 64.9]: [0, 0.00734215975]
[64.9, 65.9]: [0, 0.00734215975]
[65.9, 66.9]: [0, 0.00734215975]
[66.9, 67.9]: [0, 0.00734215975]
[67.9, 68.9]: [0, 0.00734215975]
[68.9, 69.9]: [0, 0.00734215975]
[69.9, 70.9]: [0, 0.00734215975]
[70.9, 71.9]: [0, 0.00734215975]
[71.9, 72.9]: [0, 0.00734215975]
[72.9, 73.9]: [0, 0.00734215975]
[73.9, 74.9]: [0, 0.00734215975]
[74.9, 75.9]: [0, 0.00734215975]
[75.9, 76.9]: [0, 0.00734215975]
[76.9, 77.9]: [0, 0.00734215975]
[77.9, 78.9]: [0, 0.00734215975]
[78.9, 79.9]: [0, 0.00734215975]
[79.9, 80.9]: [0, 0.00734215975]
[80.9, 81.9]: [0, 0.00734215975]
[81.9, 82.9]: [0, 0.00734215975]
[82.9, 83.9]: [0, 0.00734215975]
[83.9, 84.9]: [0, 0.00734215975]
[84.9, 85.9]: [0, 0.00734215975]
[85.9, 86.9]: [0, 0.00734215975]
[86.9, 87.9]: [0, 0.00734215975]
[87.9, 88.9]: [0, 0.00734215975]
[88.9, 89.9]: [0, 0.00734215975]
[89.9, 90.9]: [0, 0.00734215975]
[90.9, 91.9]: [0, 0.00734215975]
[91.9, 92.9]: [0, 0.00734215975]
[92.9, 93.9]: [0, 0.00734215975]
[93.9, 94.9]: [0, 0.00734215975]
[94.9, 95.9]: [0, 0.00734215975]
[95.9, 96.9]: [0, 0.00734215975]
[96.9, 97.9]: [0, 0.00734215975]
[97.9, 98.9]: [0, 0.00734215975]
[98.9, 99.9]: [0, 0.00734215975]
outside: [0, 0.00734215975]
"""

residual_time = 0.09 # seconds
residual_output = """
p(0) ∈ [0.0, 2.449276583058457e-9]
p(1) ∈ [0.7499999999999999, 0.7500000024492767]
p(2) ∈ [0.0, 2.449276583058457e-9]
p(3) ∈ [0.14062499999999997, 0.14062500244927661]
p(4) ∈ [0.0, 2.449276583058457e-9]
p(5) ∈ [0.05273437499999999, 0.05273437744927659]
p(6) ∈ [0.0, 2.449276583058457e-9]
p(7) ∈ [0.024719238281249997, 0.024719240730526587]
p(8) ∈ [0.0, 2.449276583058457e-9]
p(9) ∈ [0.012977600097656248, 0.012977602546932835]
p(10) ∈ [0.0, 2.449276583058457e-9]
p(11) ∈ [0.00729990005493164, 0.007299902504208224]
p(12) ∈ [0.0, 2.449276583058457e-9]
p(13) ∈ [0.004301726818084716, 0.0043017292673613]
p(14) ∈ [0.0, 2.449276583058457e-9]
p(15) ∈ [0.002621364779770374, 0.002621367229046958]
p(16) ∈ [0.0, 2.449276583058457e-9]
p(17) ∈ [0.0016383529873564837, 0.0016383554366330671]
p(18) ∈ [0.0, 2.449276583058457e-9]
p(19) ∈ [0.0010444500294397583, 0.0010444524787163417]
p(20) ∈ [0.0, 2.449276583058457e-9]
p(21) ∈ [0.0006765187690689344, 0.0006765212183455177]
p(22) ∈ [0.0, 2.449276583058457e-9]
p(23) ∈ [0.0004439654422014882, 0.00044396789147807135]
p(24) ∈ [0.0, 2.449276583058457e-9]
p(25) ∈ [0.0002945539953067566, 0.0002945564445833397]
p(26) ∈ [0.0, 2.449276583058457e-9]
p(27) ∈ [0.00019724597900006022, 0.00019724842827664334]
p(28) ∈ [0.0, 2.449276583058457e-9]
p(29) ∈ [0.00013314103582504064, 0.00013314348510162376]
p(30) ∈ [0.0, 2.449276583058457e-9]
p(31) ∈ [0.00009049429778733231, 0.0000904967470639154]
p(32) ∈ [0.0, 2.449276583058457e-9]
p(33) ∈ [0.00006188213010457283, 0.00006188457938115592]
p(34) ∈ [0.0, 2.449276583058457e-9]
p(35) ∈ [0.000042543964446893823, 0.000042546413723476894]
p(36) ∈ [0.0, 2.449276583058457e-9]
p(37) ∈ [0.000029388922808709547, 0.000029391372085292614]
p(38) ∈ [0.0, 2.449276583058457e-9]
p(39) ∈ [0.00002038856519854225, 0.000020391014475125317]
p(40) ∈ [0.0, 2.449276583058457e-9]
p(41) ∈ [0.000014199179334699067, 0.000014201628611282129]
p(42) ∈ [0.0, 2.449276583058457e-9]
p(43) ∈ [9.923290103227188e-6, 9.92573937981025e-6]
p(44) ∈ [0.0, 2.449276583058457e-9]
p(45) ∈ [6.957089257153845e-6, 6.959538533736905e-6]
p(46) ∈ [0.0, 2.449276583058457e-9]
p(47) ∈ [4.891703383936298e-6, 4.894152660519358e-6]
p(48) ∈ [0.0, 2.449276583058457e-9]
p(49) ∈ [3.44865088567509e-6, 3.451100162258149e-6]
p(50) ∈ [0.0, 2.449276583058457e-9]
p(51) ∈ [2.4372676932415293e-6, 2.4397169698245884e-6]
p(52) ∈ [0.0, 2.449276583058457e-9]
p(53) ∈ [1.726397949379417e-6, 1.7288472259624759e-6]
p(54) ∈ [0.0, 2.449276583058457e-9]
p(55) ∈ [1.2254342587112823e-6, 1.2278835352943412e-6]
p(56) ∈ [0.0, 2.449276583058457e-9]
p(57) ∈ [8.715372960662137e-7, 8.739865726492724e-7]
p(58) ∈ [0.0, 2.449276583058457e-9]
p(59) ∈ [6.209703234471772e-7, 6.234196000302358e-7]
p(60) ∈ [0.0, 2.449276583058457e-9]
p(61) ∈ [4.431925292344773e-7, 4.4564180581753587e-7]
p(62) ∈ [0.0, 2.449276583058457e-9]
p(63) ∈ [3.168134095699584e-7, 3.1926268615301694e-7]
p(64) ∈ [0.0, 2.449276583058457e-9]
p(65) ∈ [2.2680960003303837e-7, 2.2925887661609688e-7]
p(66) ∈ [0.0, 2.449276583058457e-9]
p(67) ∈ [1.626024706119209e-7, 1.650517471949794e-7]
p(68) ∈ [0.0, 2.449276583058457e-9]
p(69) ∈ [1.1672534497498607e-7, 1.1917462155804456e-7]
p(70) ∈ [0.0, 2.449276583058457e-9]
p(71) ∈ [8.389634170077123e-8, 8.634561828382972e-8]
p(72) ∈ [0.0, 2.449276583058457e-9]
p(73) ∈ [6.037135399413605e-8, 6.282063057719453e-8]
p(74) ∈ [0.0, 2.449276583058457e-9]
p(75) ∈ [4.3491205673407225e-8, 4.5940482256465696e-8]
p(76) ∈ [0.0, 2.449276583058457e-9]
p(77) ∈ [3.13638502452456e-8, 3.381312682830407e-8]
p(78) ∈ [0.0, 2.449276583058457e-9]
p(79) ∈ [2.2640779395786663e-8, 2.5090055978845127e-8]
p(80) ∈ [0.0, 2.449276583058457e-9]
p(81) ∈ [1.6359343648784874e-8, 1.8808620231843338e-8]
p(82) ∈ [0.0, 2.449276583058457e-9]
p(83) ∈ [1.1831311031710488e-8, 1.4280587614768949e-8]
p(84) ∈ [0.0, 2.449276583058457e-9]
p(85) ∈ [8.563943159581138e-9, 1.1013219742639599e-8]
p(86) ∈ [0.0, 2.449276583058457e-9]
p(87) ∈ [6.203992913901109e-9, 8.653269496959568e-9]
p(88) ∈ [0.0, 2.449276583058457e-9]
p(89) ∈ [4.497894862578305e-9, 6.947171445636764e-9]
p(90) ∈ [0.0, 2.449276583058457e-9]
p(91) ∈ [3.2634182834467587e-9, 5.712694866505217e-9]
p(92) ∈ [0.0, 2.449276583058457e-9]
p(93) ∈ [2.369449977077035e-9, 4.818726560135493e-9]
p(94) ∈ [0.0, 2.449276583058457e-9]
p(95) ∈ [1.7215534989700334e-9, 4.170830082028491e-9]
p(96) ∈ [0.0, 2.449276583058457e-9]
p(97) ∈ [1.2516396612409682e-9, 3.7009162442994258e-9]
p(98) ∈ [0.0, 2.449276583058457e-9]
p(99) ∈ [9.105678535528043e-10, 3.3598444366112617e-9]
"""

def parse_gubpi_output(output_str):
    bounds = []
    pattern = re.compile(r'\[(.*), (.*)\]: \[(.*), (.*)\]')
    for match in pattern.finditer(output_str):
        lower_bound, upper_bound, lower_val, upper_val = match.groups()
        index = round((float(lower_bound) + float(upper_bound)) / 2)  # Convert to integer
        bounds.append((float(lower_val), float(upper_val)))
    return bounds

def parse_residual_output(output_str):
    bounds = []
    pattern = re.compile(r'p\((.*)\) ∈ \[(.*), (.*)\]')
    for match in pattern.finditer(output_str):
        index, lower_val, upper_val = match.groups()
        index = int(index)
        bounds.append((float(lower_val), float(upper_val)))
    return bounds

indices = list(range(100))[1::2]

# Extracted bounds for gubpi_output
gubpi_bounds = parse_gubpi_output(gubpi_output)[1::2]
gubpi_lowers = [lower for lower, _ in gubpi_bounds]
gubpi_uppers = [upper for _, upper in gubpi_bounds]

# Extracted bounds for residual_output
residual_bounds = parse_residual_output(residual_output)[1::2]
residual_lowers = [lower for lower, _ in residual_bounds]
residual_uppers = [upper for _, upper in residual_bounds]

# Exact solution
exact = [hitting_time_prob(i, 3/4) for i in indices]

fig, ax = plt.subplots(figsize=(6, 4))

# Plot gubpi bounds:
ax.plot(indices, gubpi_lowers, 'b--', marker='|', alpha=0.5, linewidth=1)
ax.plot(indices, gubpi_uppers, 'b-', marker='|', alpha=0.5, linewidth=1)
ax.fill_between(indices, gubpi_lowers, gubpi_uppers, color='blue', alpha=0.2, label='GuBPI Bounds (103 s)')

# Plot residual bounds:
ax.plot(indices, residual_lowers, 'r--', marker='|', alpha=0.5, linewidth=1)
ax.plot(indices, residual_uppers, 'r-', marker='|', alpha=0.5, linewidth=1)
ax.fill_between(indices, residual_lowers, residual_uppers, color='red', alpha=0.2, label='Residual Mass Bounds (0.019 s)')

# Plot exact masses:
ax.scatter(indices, exact, marker='x', color='green', zorder=5, s=20, label='Exact probability')

# Setting symmetrical logarithmic scale
linthresh = 1e-8
ax.set_yscale('symlog', linthresh=linthresh)

# Customizing the y-axis labels
ax.set_ylim(bottom=0, top=1)
ax.set_yticks([0, 1e-9, 1e-8, 1e-7, 1e-6, 1e-5, 1e-4, 1e-3, 1e-2, 1e-1, 1])
ax.yaxis.set_major_formatter(ticker.LogFormatterSciNotation())

plt.ylabel('Probability Mass')
plt.legend()
plt.grid(True, which='both', linestyle='--', linewidth=0.5)

# save as pdf
plt.savefig('residual_vs_gubpi.pdf', bbox_inches='tight')

plt.show()
