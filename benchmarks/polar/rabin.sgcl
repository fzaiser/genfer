# SKIP

i ~ Geometric(1/2);
n ~ Geometric(1/2);
d ~ Geometric(1/2);
phase := 0;
while 1 < i or phase = 1 {
    if phase = 0 {
        n := 1;
        phase := 1;
    } else {
        if 0 < n {
            if 1 ~ Bernoulli(1/2) {
                d -= 1;
            }
            n -= 1;
        } else {
            phase := 0;
        }
    }
}
return d;

#= https://github.com/probing-lab/polar/blob/5fb1f34a8085d49ba91920ebaf8298e2d46fb387/benchmarks/k_induction/rabin.prob

phase = 0
while 1 < i && phase == 1:
    if phase == 0:
        n = 1
        phase = 1
    else:
        if 0 < n:
            d = Bernoulli(1/2)
            i = i - d
            n = n - 1
        else:
            phase = 0
        end
    end
end

=#
