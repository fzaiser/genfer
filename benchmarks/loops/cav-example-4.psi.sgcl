# Adapted from https://github.com/eth-sri/psi/blob/f9aa5028235e46b5a02dbe67e37d39b0ab53f412/test/colorado/cav-example-4.psi
# It's just a geometric counter now

x := 0;
guard ~ Bernoulli(0.5);
while guard = 0 {
    x += 1;
    guard ~ Bernoulli(0.5);
}
return x;

#= Original PSI code:

// TODO: this contains unbounded loops in the original, but only finite number of iterations are
// relevant for computing probabilities
// TODO: allow computing probabilities

def main(){
    x := 0;
    guard := -1:ℝ; // TODO: this annotation should not be necessary
    guard = uniform(0,1);
    //while guard >= 1/2 {
    repeat 21{ if guard >= 1/2 {
        x = x + 1;
		guard = uniform(0,1);
    }}
    return x; // expected: 1/1024·δ(9)[x]+1/1048576·δ(19)[x]+1/128·δ(6)[x]+1/131072·δ(16)[x]+1/16384·δ(13)[x]+1/16·δ(3)[x]+1/2048·δ(10)[x]+1/2097152·δ(20)[x]+1/2097152·δ(21)[x]+1/256·δ(7)[x]+1/262144·δ(17)[x]+1/2·δ(0)[x]+1/32768·δ(14)[x]+1/32·δ(4)[x]+1/4096·δ(11)[x]+1/4·δ(1)[x]+1/512·δ(8)[x]+1/524288·δ(18)[x]+1/64·δ(5)[x]+1/65536·δ(15)[x]+1/8192·δ(12)[x]+1/8·δ(2)[x]
}

=#
