# Adapted from https://github.com/LKlinke/Prodigy/blob/main/pgfexamples/equivalence/bit_flip_conditioning.pgcl

i := 0;
b1 := 0;
b2 := 0;
b3 := 0;
b4 := 0;

while (! ((b1 = 0) and (b2 = 0))) {
    b1 ~ Bernoulli(0.5);
    b2 ~ Bernoulli(0.5);
    observe ( (b1 = 0 and b3 = 0) or (b1 = 1 and b3 = 1) or (b2 = 0 and b4 = 0) or (b2 = 1 and b4 = 1) );
    b3 := b1;
    b4 := b2;
    i += 1;
}

return i;

#= Original code:

bool b1
bool b2
bool b3
bool b4
nat i
nat temp

while (not ((b1 = 0) & (b2 = 0))) {
    b1 := bernoulli(1/2)
    b2 := bernoulli(1/2)
    observe( (b1 = 0 & b3 = 0) || (b1 = 1 & b3 = 1) || (b2 = 0 & b4 = 0) || (b2 = 1 & b4 = 1) )
    b3 := b1
    b4 := b2
    i := i+1
    temp := 0
}

=#
