# Adapted from https://github.com/eth-sri/psi/blob/f9aa5028235e46b5a02dbe67e37d39b0ab53f412/test/coupling/dynkin.psi

X := 10;
while X < 11 {
    X +~ UniformDisc(1, 11);
}
return X

#= Original PSI code:

// skipped
def dynkin(s,N){
	x := s;
	// l := [x];
	while x < N{
		r := uniformInt(1,10);
		x = x + r;
		// l = [x] ~ l;
	}
	return x;
}

def main(){
	r := array(21,0:ℝ);
	for N in [11..21){
		// bound := (9/10)^(N/5-2); // TODO: allow PSI to prove that the bound bounds the result
		r[N] = TV(infer(()=>dynkin(1,N)),infer(()=>dynkin(10,N)))
	}
	return (r[11],r[12],r[13],r[14],r[15],r[16],r[17],r[18],r[19],r[20]);
}


def TV(a: Distribution[ℝ], b: Distribution[ℝ]){
	def TVImpl(a: Distribution[ℝ], b: Distribution[ℝ]){
		return expectation(infer((){
			x := sample(a);
			p₁ := expectation(infer(()=>sample(a)==x));
			p₂ := expectation(infer(()=>sample(b)==x));
			if p₂=0 { return 1:ℝ; }
			return abs(p₁-p₂)/(2*p₁);
		}));
	}
	return (TVImpl(a,b)+TVImpl(b,a))/2;
}

=#
